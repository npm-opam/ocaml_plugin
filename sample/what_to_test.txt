This toy application is meant to demo various uses of the plugin library.
Here is a small list of what to test with the run executable:
In any case, you might want to use -shell-verbose or -shell-echo
to have a better idea of what is happening.

UNEMBEDDED MODE
---------------

this mode uses a shared OCaml compiler found in the path,
and need -I option to find its needed cmi files

./run.exe
  default command, it loads 3 config files without errors

./run.exe -error
  try to load config_v1_error.ml which is not well typed
  fail with a proper type error message

./run.exe -n -v1 config/config_01.ml
  try to load without adding the -I flags to the cmi
  this fail with an Unbound module Ocaml_plugin

./run.exe -n -I . -I ../lib -v1 config/config_01.ml
  works well

./run.exe -n -I . -I ../lib -v2 config/config_02.ml
  should not work because config_v2 uses some utility functions
  defined in config/config_util.ml
  this fail with an Unbound module Config_util

./run.exe -n -I . -I ../lib -v2 'config/config_util.ml config/config_02.ml'
  works well

You can use -tmp as well as -clean if you are not interested in seeing
the copied files and the compilation directory.

EMBEDDED MODE (STANDALONE EXECUTABLES)
--------------------------------------

This mode is more tricky, it uses an ocamlopt embedded in the executable
as well as cmi files so that the resulting executable do not need
any of them. The embedded files are batches together in tgz file that gets
appended after the binary code. The new binary is called -standalone by convention.

There is a util provided in the bin/ directory to create standalone executables:

../bin/ocaml_embed_compiler.exe -exe ./run.exe -cc $(which ocamlopt) dsl.cmi ../lib/ocaml_plugin.cmi $(ocamlopt -where)/pervasives.cmi -o ./run-standalone.exe

you can extract back the archive embedded in the executable using:
../bin/ocaml_embed_compiler.exe -x ./run-standalone.exe

Then, you can try:

./run-standalone.exe -embed
  work well

./run.exe -embed
  fail during the extraction of embedded section since the executable is not
  standalone

You can try also to forget an cmi file and see what happen

../bin/ocaml_embed_compiler.exe -exe run.exe -cc $(which ocamlopt) ../lib/ocaml_plugin.cmi -o run-standalone.exe
./run-standalone.exe -embed
  fail with an unbound module (dsl.cmi is missing)

BUILD RULES
-----------

Depending on your build-system, you probably want to add a special rul to build
the standalone version of the executable (calling ocaml_embed_compiler).
At JS we have a special rule in OMakeroot where the set of cmi files to embed is
configurable via a variable.
In the release, there is a rule to include a bunch of cmi by default.

-------------
You can also try with some more config files.
